//ðŸ§©Don't Edit this file.âœ¨Generated in Thu Aug 31 2023 17:25:46 GMT-0300 (Brasilia Standard Time)âœ¨

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Dish_Categories {
  id_dish_category Int      @id @default(autoincrement())
  name             String   @unique
  Dishes           Dishes[]
}

model Dish_Receipe {
  id_dish       Int
  id_ingredient Int

  // relations
  dish       Dishes      @relation(fields: [id_dish], references: [id_dish], onDelete: Cascade)
  ingredient Ingredients @relation(fields: [id_ingredient], references: [id_ingredient], onDelete: Cascade)

  // constrains
  @@unique([id_dish, id_ingredient])
}

model Dishes {
  id_dish          Int      @id @default(autoincrement())
  id_dish_category Int
  name             String   @unique
  description      String
  image_url        String?
  price            Int
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  // relations
  dish_category  Dish_Categories  @relation(fields: [id_dish_category], references: [id_dish_category], onDelete: Cascade)
  Dish_Receipe   Dish_Receipe[]
  Favorites      Favorites[]
  Purchase_Items Purchase_Items[]

  // constrains
  @@unique([id_dish, id_dish_category])
}

model Favorites {
  id_favorite Int @id @default(autoincrement())
  id_dish     Int
  id_user     Int

  // relations
  dish Dishes @relation(fields: [id_dish], references: [id_dish])
  user Users  @relation(fields: [id_user], references: [id_user])

  @@unique([id_dish, id_user])
}

model Ingredients {
  id_ingredient Int            @id @default(autoincrement())
  name          String
  Dish_Receipe  Dish_Receipe[]
}

model Purchase_Items {
  id_purchase_item String @id @default(uuid())
  id_purchase      Int
  id_dish          Int
  price            Int
  quantity         Int

  // relations
  purchase Purchases @relation(fields: [id_purchase], references: [id_purchase])
  dish     Dishes    @relation(fields: [id_dish], references: [id_dish])

  // constrains
  @@unique([id_dish, id_purchase])
}

model Purchase_Status {
  id_purchase_status      Int                       @id @default(autoincrement())
  status                  String                    @unique
  Purchase_Status_History Purchase_Status_History[]
  Purchases               Purchases[]
}

model Purchase_Status_History {
  id_purchase        Int
  id_purchase_status Int
  status_init_at     DateTime @default(now())

  purchase        Purchases       @relation(references: [id_purchase], fields: [id_purchase])
  purchase_Status Purchase_Status @relation(references: [id_purchase_status], fields: [id_purchase_status])

  @@id([id_purchase, id_purchase_status])
}

model Purchases {
  id_purchase        Int @id @default(autoincrement())
  id_user            Int
  id_purchase_status Int

  purchased_at DateTime @default(now())
  updated_at   DateTime @default(now())

  // relations
  user            Users           @relation(fields: [id_user], references: [id_user])
  purchase_status Purchase_Status @relation(fields: [id_purchase_status], references: [id_purchase_status])

  Purchase_Items          Purchase_Items[]
  Purchase_Status_History Purchase_Status_History[]

  // constrains
  @@unique([id_purchase, id_purchase_status])
}

model User_Types {
  id_user_type Int     @id @default(autoincrement())
  type         String  @unique
  Users        Users[]
}

model Users {
  id_user      Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  password     String
  avatar_url   String?
  user_type    User_Types  @relation(fields: [id_user_type], references: [id_user_type])
  id_user_type Int
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now()) @updatedAt
  Favorites    Favorites[]
  Purchases    Purchases[]
}
